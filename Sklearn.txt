import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
import numpy as np

# 1. 資料生成
n_samples = 250
n_features = 2
centers = 4
shuffle = True
cluster_std = 2.0
random_state = 42

# 使用 make_blobs 生成模擬資料
X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=centers,
                  shuffle=shuffle, cluster_std=cluster_std, random_state=random_state)

# 打亂資料順序
np.random.shuffle(X)

# 2. 使用 sklearn 的 KMeans 函數
kmeans = KMeans(n_clusters=4, init='random', random_state=42)
kmeans.fit(X)
labels_sklearn = kmeans.labels_

# 3. 視覺化結果
def plot_clusters(X, labels, centroids, title, version):
    """
    視覺化分群結果。

    Parameters:
    - X: 資料集
    - labels: 資料點的分群標籤
    - centroids: 群心的位置
    - title: 圖表標題
    - version: 版本編號，用於儲存圖片
    """
    unique_labels = np.unique(labels)
    for i in unique_labels:
        cluster_points = X[labels == i]
        plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {i}')

    plt.scatter(centroids[:, 0], centroids[:, 1],
                marker='x', s=200, linewidths=3, color='black', label='Cluster Centers')

    plt.title(title)
    plt.legend()
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.savefig(f'Fig_{version}.png')  # 儲存圖片
    plt.show()

# 附上分群前的資料點散圖
plot_clusters(X, np.zeros_like(y), centroids_custom, 'Original Data (Custom)', '1')

# 附上分群後的資料點散圖 (使用 sklearn 的 KMeans)
plot_clusters(X, labels_sklearn, kmeans.cluster_centers_, 'KMeans Clustering (sklearn)', '3')
